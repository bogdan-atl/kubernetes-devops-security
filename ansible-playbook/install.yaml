---
- name: Установка утилит DevSecOps
  hosts: all
  become: true
  tasks:

    - name: Обновление списка пакетов
      apt:
        update_cache: yes

    - name: Установка необходимых пакетов
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - software-properties-common
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - jq
        - git
        - python3-pip

    - name: Install docker-compose python package
      ansible.builtin.pip:
        name: kubernetes

    - name: Add Docker GPG key
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
      loop:
        - url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/trusted.gpg.d/docker.gpg
        - url: https://download.docker.com/linux/ubuntu/gpg
          dest: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Установка прав на файл docker.gpg
      file:
        path: /etc/apt/trusted.gpg.d/docker.gpg
        mode: '0644'

    - name: Add Docker repository to /etc/apt/sources.list.d/docker.list
      ansible.builtin.blockinfile:
        path: /etc/apt/sources.list.d/docker.list
        block: |
         deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      become: yes

    - name: Обновление списка пакетов после добавления Docker
      apt:
        update_cache: yes

    - name: Установка Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Установка default-jdk
      become: true
      apt:
        name: default-jdk
        state: present

    - name: Установка maven
      apt:
        name:
          - maven
        state: present

    #- name: Download Minikube binary
    #  become: true
    #  shell: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    #  args:
     #   chdir: /tmp

    #- name: Install Minikube
    #  become: true
    #  shell: install /tmp/minikube-linux-amd64 /usr/local/bin/minikube

     #- name: Start minicube
     # shell: 'sudo minikube start --driver=docker --cpus=2 --memory=2048 --force'

    #- name: Старт sonarqube
    #  become: true
     # shell: docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest
     # changed_when: false

    - name: Add the trivy-repo
      apt:
        update_cache: yes
        name: "{{ item }}"
      loop:
        - wget
        - apt-transport-https
        - gnupg
        - lsb-release

    - name: Add Trivy repository key
      apt_key:
        url: "https://aquasecurity.github.io/trivy-repo/deb/public.key"
        state: present

    - name: Add Trivy repository
      lineinfile:
        dest: "/etc/apt/sources.list.d/trivy.list"
        line: "deb https://aquasecurity.github.io/trivy-repo/deb {{ ansible_distribution_release }} main"
        create: yes

    - name: Update Repo
      apt:
        update_cache: yes

    - name: Install Trivy
      apt:
        name: trivy
        state: present
        update_cache: yes

    - name: Create installation directory
      file:
        path: /root/
        state: directory

    - name: Download OPA binary
      get_url:
        url: https://github.com/open-policy-agent/opa/releases/download/v0.38.1/opa_linux_amd64
        dest: /root/opa
        mode: '0755'

    - name: Run OPA in the background
      shell:  ./opa run -s
      async: 2592000
      poll: 0
      args:
        chdir: /root
      become: yes
      tags:
        - opa

    - name: Print the output of OPA run command
      debug:
        msg: "OPA is running successfully"

    - name: Change directory to /root/
      become: true
      shell: cd /root/

    - name: Get latest version of conftest
      become: true
      shell: |
        LATEST_VERSION=$(wget -O - "https://api.github.com/repos/open-policy-agent/conftest/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | cut -c 2-)
        echo $LATEST_VERSION
      register: conftest_version

    - name: Download conftest binary
      become: true
      shell: |
        wget "https://github.com/open-policy-agent/conftest/releases/download/v{{ conftest_version.stdout }}/conftest_{{ conftest_version.stdout }}_Linux_x86_64.tar.gz"
        tar xzf conftest_{{ conftest_version.stdout }}_Linux_x86_64.tar.gz
      args:
        chdir: /root/

    - name: Move conftest binary to /usr/local/bin
      become: true
      shell: |
        mv conftest /usr/local/bin/
      args:
        chdir: /root/

    - name: Download kubesec
      become: true
      become_user: root
      get_url:
        url: https://github.com/controlplaneio/kubesec/releases/download/v2.11.2/kubesec_linux_amd64.tar.gz
        dest: /root/kubesec_linux_amd64.tar.gz

    - name: Extract kubesec tar.gz
      ansible.builtin.unarchive:
        src: /root/kubesec_linux_amd64.tar.gz
        dest: /root/
        remote_src: yes

    - name: Move kubesec to /usr/bin/
      become: true
      become_user: root
      command: mv /root/kubesec /usr/bin/

    - name: Загрузка последней версии kubectl
      shell: curl -LO https://dl.k8s.io/release/$(curl -LS https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
      args:
        chdir: /tmp
      register: download_result
      changed_when: download_result.rc == 0

    - name: Сделать kubectl исполняемым
      shell: chmod +x /tmp/kubectl
      register: chmod_result
      changed_when: chmod_result.rc == 0

    - name: Перемещение kubectl в директорию PATH
      shell: sudo mv /tmp/kubectl /usr/local/bin/kubectl
      args:
        executable: /bin/bash
      register: move_result
      changed_when: move_result.rc == 0

    - name: Проверка работы kubectl
      command: kubectl version
      register: kubectl_output

    - name: Вывод результата
      debug:
        var: kubectl_output.stdout

    - name: Install kubebench
      ansible.builtin.apt:
        deb: https://github.com/aquasecurity/kube-bench/releases/download/v0.4.0/kube-bench_0.4.0_linux_amd64.deb
      tags: kubebench

    - name: Download istio
      ansible.builtin.get_url:
        url: "https://istio.io/downloadIstio"
        dest: /tmp/istiinstall.sh
      become: yes
      tags:
        - istio

    - name: Run a istio scripts
      command: sh /tmp/istiinstall.sh
      tags:
        - istio

    - name: Поиск папки Istio
      find:
        paths: ~/
        recurse: yes
        patterns: "istio-*"
        file_type: directory
      register: istio_folder
      tags:
        - istio

    - name: Выделение первого пути из найденных
      set_fact:
        istio_folder_path: "{{ istio_folder.files[0].path }}"
      tags:
        - istio

    - name: Получение названия папки Istio
      command: "basename {{ istio_folder_path }}"
      register: istio_folder_name
      become: yes
      tags:
        - istio

    - name: Копирование istioctl в /usr/local/bin/
      copy:
        src: "{{ istio_folder_name.stdout }}/bin/istioctl"
        dest: /usr/local/bin/
        remote_src: true
      become: yes
      tags:
        - istio

    - name: Add primissions istio
      ansible.builtin.file:
        path: /usr/local/bin/istioctl
        owner: root
        group: root
        mode: '755'
      tags:
        - istio

    - name: Установка Istio с профилем "demo"
      ansible.builtin.command:
        argv:
          - istioctl
          - install
          - --set
          - profile=demo
          - -y
      args:
        chdir: "{{ istio_folder_name.stdout }}"
      become: yes
      tags:
        - istio

    - name: Create a new namespace called devsecops-istio
      kubernetes.core.k8s:
        name: devsecops-istio
        api_version: v1
        kind: Namespace
        state: present

    - name: istio-injection
      kubernetes.core.k8s:
        state: patched
        kind: Namespace
        name: devsecops-istio
        definition:
            metadata:
                labels:
                   istio-injection: enabled


   # - name: Install falco
   #   command: "apt-get install -y falco"
   #   become: yes
   #   environment:
   #     FALCO_FRONTEND: noninteractive
   #   tags:
   #     - falco


    - name: Install keyrings falco
      ansible.builtin.get_url:
        url: https://falco.org/repo/falcosecurity-packages.asc
        dest: /usr/share/keyrings/falco-archive-keyring.gpg

    - name: Configure apt repository
      lineinfile:
        path: /etc/apt/sources.list.d/falcosecurity.list
        line: "deb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable main"
        create: yes
      tags:
        - falco

    - name: Update repositories cache
      ansible.builtin.apt:
        name: " {{ item }} "
        update_cache: yes
      loop:
        - dkms
        - make
        - linux-headers-generic
        - falco
      tags:
        - falco

    - name: Download helm falco
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: ~/get_helm.sh
        mode: '700'
      become: yes
      tags:
        - falco

    - name: Run falco
      ansible.builtin.shell: ./get_helm.sh
      tags:
        - falco

    - name: Add helm falco repo
      kubernetes.core.helm_repository:
        name: falcosecurity
        repo_url: "https://falcosecurity.github.io/charts"
      tags: falco-helm

    - name: Install falco using helm
      kubernetes.core.helm:
        name: falco
        chart_ref: falcosecurity/falco
        release_namespace: falco
        create_namespace: true
        set_values:
            - { value: "falcosidekick.enabled=true" }
            - { value: "falcosidekick.webui.enabled=true" }
      tags: falco-helm

    - name: Clon repo kubescan
      git:
        repo: https://github.com/octarinesec/kube-scan.git
        dest: ~/kube-scan
      become: yes
      tags:
        - kubescan

    - name: Apply the template kube-scan.yaml in kube-scan.yamlnamespace
      kubernetes.core.k8s:
        state: present
        src: ~/kube-scan/kube-scan.yaml
        namespace: kube-scan.yaml
      tags: kubescan

    - name: Install vault start index.php
      block:
        - name: Git clone
          git:
            repo: https://github.com/sidd-harth/php-vault-example.git
            dest: ~/vault

        - name: Add helm hashicorp vault repo
          kubernetes.core.helm_repository:
            name: hashicorp
            repo_url: "https://helm.releases.hashicorp.com"

        - name: Install vault using helm
          kubernetes.core.helm:
            name: vault
            chart_ref: hashicorp/vault
            release_namespace: vault-devsecops
            create_namespace: true
            set_values:
                - { value: "ui.enabled=true" }
                - { value: "ui.serviceType=NodePort" }
                - { value: "server.dataStorage.enabled=false" }
            chart_version: "0.17.0"

        - name: Wait for Vault pod to be ready
          kubernetes.core.k8s_info:
            kind: Pod
            name: vault-0
            namespace: vault-devsecops
            label_selectors:
                - "status.phase=Running"
            wait_sleep: 10
            wait_timeout: 20  # Adjust the timeout as needed
          register: vault_pod

        - name: Check RC status of vault operator init
          when: vault_pod.resources[0].status.phase == "Running"
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault operator init
          register: vault_init_output

        - name: Debug
          debug:
            var: vault_init_output.stdout_lines

        - name: Parse Vault Initialization Data
          set_fact:
             unseal_keys:
                - "{{ vault_init_output.stdout_lines[0] | regex_replace('[0mUnseal Key [0-9]+: ', '') }}"
                - "{{ vault_init_output.stdout_lines[1] | regex_replace('[0mUnseal Key [0-9]+: ', '') }}"
                - "{{ vault_init_output.stdout_lines[2] | regex_replace('[0mUnseal Key [0-9]+: ', '') }}"
             initial_root_token: "{{ vault_init_output.stdout_lines[6] | regex_replace('Initial Root Token: ', '') }}"

        - name: Display extracted data
          debug:
            var: unseal_keys, initial_root_token

        - name: Set Operator unseal_keys
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault operator unseal {{ item }}
          loop:
            - "{{ unseal_keys[0] }}"
            - "{{ unseal_keys[1] }}"
            - "{{ unseal_keys[2] }}"

        - name: Login into the vault with root token
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault login {{ initial_root_token }}
          register: vault_login_output

        - name: Debug
          debug:
            var: vault_login_output.stdout_lines

        - name: Enable path as below
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault secrets enable -path=devsecops kv-v2

        - name: Put the secret values in devsecops path
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault kv put devsecops/secret-data username=devsecops password=skdjD432JDjd apikey=dgg7B3BaaeBleqE


        - name: Copy content into a file in the remote pod
          kubernetes.core.k8s_cp:
            state: to_pod
            namespace: vault-devsecops
            pod: vault-0
            remote_path: /home/vault/policy.hcl
            content: >-
                path "devsecops/secret-data" {
                    capabilities = ["read"]
                }

        - name: Write the policy
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault policy write devsecops-app /home/vault/policy.hcl
          register: vault_policy_output

        - name: Debug
          debug:
            var: vault_policy_output.stdout_lines

        - name: Enable the kubernetes authentication method
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: vault auth enable kubernetes

        - name: Configure vault to talk to the Kubernetes cluster
          kubernetes.core.k8s_exec:
                namespace: vault-devsecops
                pod: vault-0
                command: sh -c 'echo $KUBERNETES_PORT_443_TCP_ADDR'
          register: KUBERNETES_PORT_443_TCP_ADDR


        - name: Debug
          debug:
            var: KUBERNETES_PORT_443_TCP_ADDR.stdout_lines | join('')


        - name: Configure vault to talk to the Kubernetes cluster
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: sh -c 'vault write auth/kubernetes/config token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" kubernetes_host=https://{{ KUBERNETES_PORT_443_TCP_ADDR.stdout_lines | join('') }}:443 kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
          register: vault_policy

        - name: Debug
          debug:
            var: vault_policy.stdout_lines


        - name: Configure the required role
          kubernetes.core.k8s_exec:
            namespace: vault-devsecops
            pod: vault-0
            command: >-
                vault write auth/kubernetes/role/phpapp
                bound_service_account_names=devsecops-app
                bound_service_account_namespaces=vault-devsecops
                policies=devsecops-app
                ttl=1h
          register: role

        - name: Debug
          debug:
            var: role.stdout_lines

      rescue:
       - name: Print when errors
         ansible.builtin.debug:
           msg: 'Install end with errors'

       - name: Remove a k8s namespace
         kubernetes.core.k8s:
            name: vault-devsecops
            api_version: v1
            kind: Namespace
            state: absent

       - name: Fail_and playbook
         fail:
           msg: END

      tags: vault

    - name: Install vault start index.php
      block:
        - name: Build php project
          community.docker.docker_image:
            name: vault-app:php
            build:
              path: ~/vault
            source: build

        - name: Template a patch-annotations.yaml
          template:
            src: template/patch-annotations.yaml.j2
            dest: ~/vault/patch-annotations.yaml

        - name: Apply the template php-app-k8s-deploy.yaml in vault-devsecops namespace
          kubernetes.core.k8s:
            state: present
            src: ~/vault/php-app-k8s-deploy.yaml
            namespace: vault-devsecops

      tags: deploy
